package br.com.github.rhenanrk.concorrencia;

import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Rhenanrk
 */
public class ControlaJogo extends JFrame {

    //variaveis das fontes fonte
    Font fontText = new Font("Book Antiqua", Font.PLAIN, 30);
    Font fontButtons = new Font("Book Antiqua", Font.PLAIN, 18);
    //variaveis controladoras
    private ServerSocket serverSocket = null;
    private Socket sockets = null;
    private ObjectInputStream entrada = null;
    private ObjectOutputStream saida = null;

    //jogo
    private String jogo[] = {"", "", "", "", "", "", "", "", ""};
    //servidor é X, cliente é O
    private String xo = "";
    //apelido1 é Servidor, apelido2 é Cliente
    private String apelido1, apelido2, msg;
    //controle de fluxo
    private boolean sinal;
    private boolean pararSinal = true;
    //numero de jogadas e de partidas
    private int numPartidas = 0;
    private int numJogadas = 0;
    //criptografia para conexao segura
    private String criptografia = "!ufg_concorrencia!#$%&/()!";

    public ControlaJogo() {
        initComponents();
        setSize(750, 610);
        setTitle("Jogo da Velha - Concorrencia");
        setResizable(false);
        setLocationRelativeTo(this);
        inicia();
        setIconImage(new ImageIcon(getClass().getResource("icone.png")).getImage());

        //cria janela
        addWindowListener(new WindowAdapter() {
            public void windowActivated(WindowEvent event) {
                try {
                    InetAddress thisIp = InetAddress.getLocalHost();
                    ip.setText(thisIp.getHostAddress());
                } catch (Exception e) {
                    ip.setText("127.0.0.1");
                }
            }

            @Override
            public void windowClosing(WindowEvent event) {
                if (sockets != null) {
                    enviarMensagem("Offline!");
                }
                encerrarTudo();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        newGame = new javax.swing.JButton();
        create = new javax.swing.JButton();
        join = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        port = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        nick = new javax.swing.JTextField();
        ip = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        sp = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        message = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        botao3 = new javax.swing.JButton();
        botao2 = new javax.swing.JButton();
        botao1 = new javax.swing.JButton();
        botao4 = new javax.swing.JButton();
        botao7 = new javax.swing.JButton();
        botao8 = new javax.swing.JButton();
        botao9 = new javax.swing.JButton();
        botao6 = new javax.swing.JButton();
        botao5 = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();
        jSeparator8 = new javax.swing.JSeparator();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(200, 200, 200));
        jPanel1.setLayout(null);

        newGame.setBackground(new java.awt.Color(254, 254, 254));
        newGame.setForeground(new java.awt.Color(1, 1, 1));
        newGame.setText("Recomeçar");
        newGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameActionPerformed(evt);
            }
        });
        jPanel1.add(newGame);
        newGame.setBounds(36, 260, 140, 30);

        create.setBackground(new java.awt.Color(254, 254, 254));
        create.setForeground(new java.awt.Color(1, 1, 1));
        create.setText("Criar");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });
        jPanel1.add(create);
        create.setBounds(60, 180, 90, 30);

        join.setBackground(new java.awt.Color(254, 254, 254));
        join.setForeground(new java.awt.Color(1, 1, 1));
        join.setText("Entrar");
        join.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinActionPerformed(evt);
            }
        });
        jPanel1.add(join);
        join.setBounds(60, 220, 90, 30);

        jLabel3.setBackground(new java.awt.Color(51, 255, 0));
        jLabel3.setForeground(new java.awt.Color(1, 1, 1));
        jLabel3.setText("Porta:");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(20, 70, 50, 30);

        port.setBackground(new java.awt.Color(254, 254, 254));
        port.setForeground(new java.awt.Color(1, 1, 1));
        port.setText("jTextField2");
        jPanel1.add(port);
        port.setBounds(70, 70, 70, 30);

        jLabel1.setBackground(new java.awt.Color(51, 255, 0));
        jLabel1.setForeground(new java.awt.Color(1, 1, 1));
        jLabel1.setText("Apelido:");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(20, 110, 50, 30);

        nick.setBackground(new java.awt.Color(254, 254, 254));
        nick.setForeground(new java.awt.Color(1, 1, 1));
        nick.setText("jTextField3");
        jPanel1.add(nick);
        nick.setBounds(70, 110, 140, 30);

        ip.setBackground(new java.awt.Color(254, 254, 254));
        ip.setForeground(new java.awt.Color(1, 1, 1));
        ip.setText("jTextField1");
        jPanel1.add(ip);
        ip.setBounds(70, 30, 140, 30);

        jLabel2.setBackground(new java.awt.Color(51, 255, 0));
        jLabel2.setForeground(new java.awt.Color(1, 1, 1));
        jLabel2.setText("IP:");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(20, 30, 50, 30);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel1.add(jSeparator1);
        jSeparator1.setBounds(220, 0, 10, 480);
        jPanel1.add(jSeparator4);
        jSeparator4.setBounds(0, 160, 220, 10);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 70, 240, 510);

        jPanel2.setBackground(new java.awt.Color(200, 200, 200));
        jPanel2.setLayout(null);

        textArea.setBackground(new java.awt.Color(254, 254, 254));
        textArea.setColumns(20);
        textArea.setForeground(new java.awt.Color(1, 1, 1));
        textArea.setLineWrap(true);
        textArea.setRows(5);
        sp.setViewportView(textArea);

        jPanel2.add(sp);
        sp.setBounds(0, 50, 470, 100);

        message.setBackground(new java.awt.Color(254, 254, 254));
        message.setForeground(new java.awt.Color(1, 1, 1));
        message.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageActionPerformed(evt);
            }
        });
        message.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                messageKeyPressed(evt);
            }
        });
        jPanel2.add(message);
        message.setBounds(0, 180, 470, 40);

        jLabel5.setBackground(new java.awt.Color(51, 255, 0));
        jLabel5.setForeground(new java.awt.Color(1, 1, 1));
        jLabel5.setText("Bate-papo:");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(0, 20, 140, 30);
        jPanel2.add(jSeparator2);
        jSeparator2.setBounds(0, 10, 510, 20);

        jLabel7.setBackground(new java.awt.Color(51, 255, 0));
        jLabel7.setForeground(new java.awt.Color(1, 1, 1));
        jLabel7.setText("Digite sua mensagem:");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(0, 150, 140, 30);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(240, 350, 520, 230);

        jPanel3.setBackground(new java.awt.Color(200, 200, 200));
        jPanel3.setLayout(null);

        botao3.setBackground(new java.awt.Color(200, 200, 200));
        botao3.setText("jButton1");
        botao3.setBorderPainted(false);
        botao3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao3ActionPerformed(evt);
            }
        });
        jPanel3.add(botao3);
        botao3.setBounds(290, 10, 90, 80);

        botao2.setBackground(new java.awt.Color(200, 200, 200));
        botao2.setText("jButton1");
        botao2.setBorderPainted(false);
        botao2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao2ActionPerformed(evt);
            }
        });
        jPanel3.add(botao2);
        botao2.setBounds(190, 10, 90, 80);

        botao1.setBackground(new java.awt.Color(200, 200, 200));
        botao1.setText("jButton1");
        botao1.setBorderPainted(false);
        botao1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao1ActionPerformed(evt);
            }
        });
        jPanel3.add(botao1);
        botao1.setBounds(90, 10, 90, 80);

        botao4.setBackground(new java.awt.Color(200, 200, 200));
        botao4.setText("jButton1");
        botao4.setBorderPainted(false);
        botao4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao4ActionPerformed(evt);
            }
        });
        jPanel3.add(botao4);
        botao4.setBounds(90, 100, 90, 80);

        botao7.setBackground(new java.awt.Color(200, 200, 200));
        botao7.setText("jButton1");
        botao7.setBorderPainted(false);
        botao7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao7ActionPerformed(evt);
            }
        });
        jPanel3.add(botao7);
        botao7.setBounds(90, 190, 90, 80);

        botao8.setBackground(new java.awt.Color(200, 200, 200));
        botao8.setText("jButton1");
        botao8.setBorderPainted(false);
        botao8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao8ActionPerformed(evt);
            }
        });
        jPanel3.add(botao8);
        botao8.setBounds(190, 190, 90, 80);

        botao9.setBackground(new java.awt.Color(200, 200, 200));
        botao9.setText("jButton1");
        botao9.setBorderPainted(false);
        botao9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao9ActionPerformed(evt);
            }
        });
        jPanel3.add(botao9);
        botao9.setBounds(290, 190, 90, 80);

        botao6.setBackground(new java.awt.Color(200, 200, 200));
        botao6.setText("jButton1");
        botao6.setBorderPainted(false);
        botao6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao6ActionPerformed(evt);
            }
        });
        jPanel3.add(botao6);
        botao6.setBounds(290, 100, 90, 80);

        botao5.setBackground(new java.awt.Color(200, 200, 200));
        botao5.setText("jButton1");
        botao5.setBorderPainted(false);
        botao5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao5ActionPerformed(evt);
            }
        });
        jPanel3.add(botao5);
        botao5.setBounds(190, 100, 90, 80);
        jPanel3.add(jSeparator5);
        jSeparator5.setBounds(80, 90, 320, 10);
        jPanel3.add(jSeparator6);
        jSeparator6.setBounds(80, 180, 320, 10);

        jSeparator7.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel3.add(jSeparator7);
        jSeparator7.setBounds(180, 10, 10, 270);

        jSeparator8.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel3.add(jSeparator8);
        jSeparator8.setBounds(280, 10, 10, 270);

        getContentPane().add(jPanel3);
        jPanel3.setBounds(240, 70, 520, 280);

        jPanel4.setBackground(new java.awt.Color(200, 200, 200));

        jLabel4.setBackground(new java.awt.Color(1, 1, 1));
        jLabel4.setForeground(new java.awt.Color(1, 1, 1));
        jLabel4.setText("JOGO DA VELHA - SOFTWARE CONCORRENTE");

        jLabel6.setForeground(new java.awt.Color(1, 1, 1));
        jLabel6.setText("POR: BRENO GOMES & RHENAN KONRAD");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(284, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(242, 242, 242))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(257, 257, 257))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(jPanel4);
        jPanel4.setBounds(0, 0, 750, 70);

        pack();
    }// </editor-fold>                        

    private void botao1ActionPerformed(java.awt.event.ActionEvent evt) {                                       
        if (sinal) {
            botao1.setText(xo);
            enviarMensagem(xo + "1" + criptografia);
            enviarMensagem("true" + criptografia);
            sinal = false;
            botao1.setEnabled(false);
            if (xo.equals("X")) {
                jogo[0] = "X";
            } else {
                jogo[0] = "O";
            }
            ++numJogadas;
            checaJogo();
        }
    }                                      

    private void botao2ActionPerformed(java.awt.event.ActionEvent evt) {                                       
        if (sinal) {
            botao2.setText(xo);
            enviarMensagem(xo + "2" + criptografia);
            enviarMensagem("true" + criptografia);
            sinal = false;
            botao2.setEnabled(false);
            if (xo.equals("X")) {
                jogo[1] = "X";
            } else {
                jogo[1] = "O";
            }
            ++numJogadas;
            checaJogo();
        }
    }                                      

    private void botao3ActionPerformed(java.awt.event.ActionEvent evt) {                                       
        if (sinal) {
            botao3.setText(xo);
            enviarMensagem(xo + "3" + criptografia);
            enviarMensagem("true" + criptografia);
            sinal = false;
            botao3.setEnabled(false);
            if (xo.equals("X")) {
                jogo[2] = "X";
            } else {
                jogo[2] = "O";
            }
            ++numJogadas;
            checaJogo();
        }
    }                                      

    private void botao4ActionPerformed(java.awt.event.ActionEvent evt) {                                       
        if (sinal) {
            botao4.setText(xo);
            enviarMensagem(xo + "4" + criptografia);
            enviarMensagem("true" + criptografia);
            sinal = false;
            botao4.setEnabled(false);
            if (xo.equals("X")) {
                jogo[3] = "X";
            } else {
                jogo[3] = "O";
            }
            ++numJogadas;
            checaJogo();
        }
    }                                      

    private void botao5ActionPerformed(java.awt.event.ActionEvent evt) {                                       
        if (sinal) {
            botao5.setText(xo);
            enviarMensagem(xo + "5" + criptografia);
            enviarMensagem("true" + criptografia);
            sinal = false;
            botao5.setEnabled(false);
            if (xo.equals("X")) {
                jogo[4] = "X";
            } else {
                jogo[4] = "O";
            }
            ++numJogadas;
            checaJogo();
        }
    }                                      

    private void botao6ActionPerformed(java.awt.event.ActionEvent evt) {                                       
        if (sinal) {
            botao6.setText(xo);
            enviarMensagem(xo + "6" + criptografia);
            enviarMensagem("true" + criptografia);
            sinal = false;
            botao6.setEnabled(false);
            if (xo.equals("X")) {
                jogo[5] = "X";
            } else {
                jogo[5] = "O";
            }
            ++numJogadas;
            checaJogo();
        }
    }                                      

    private void botao7ActionPerformed(java.awt.event.ActionEvent evt) {                                       
        if (sinal) {
            botao7.setText(xo);
            enviarMensagem(xo + "7" + criptografia);
            enviarMensagem("true" + criptografia);
            sinal = false;
            botao7.setEnabled(false);
            if (xo.equals("X")) {
                jogo[6] = "X";
            } else {
                jogo[6] = "O";
            }
            ++numJogadas;
            checaJogo();
        }
    }                                      

    private void botao8ActionPerformed(java.awt.event.ActionEvent evt) {                                       
        if (sinal) {
            botao8.setText(xo);
            enviarMensagem(xo + "8" + criptografia);
            enviarMensagem("true" + criptografia);
            sinal = false;
            botao8.setEnabled(false);
            if (xo.equals("X")) {
                jogo[7] = "X";
            } else {
                jogo[7] = "O";
            }
            ++numJogadas;
            checaJogo();
        }
    }                                      

    private void botao9ActionPerformed(java.awt.event.ActionEvent evt) {                                       
        if (sinal) {
            botao9.setText(xo);
            enviarMensagem(xo + "9" + criptografia);
            enviarMensagem("true" + criptografia);
            sinal = false;
            botao9.setEnabled(false);
            if (xo.equals("X")) {
                jogo[8] = "X";
            } else {
                jogo[8] = "O";
            }
            ++numJogadas;
            checaJogo();
        }
    }                                      

    private void newGameActionPerformed(java.awt.event.ActionEvent evt) {                                        
        //envia requisissão para nova partida
        enviarMensagem("novojogo" + criptografia);
        ++numPartidas;
        for (int i = 0; i < jogo.length; i++) {
            jogo[i] = "";
        }
        if (numPartidas % 2 == 0) {
            sinal = true;
            textArea.append("X primeiro\n");
            ScrollToBottom();
            enviarMensagem("false" + criptografia);
            enviarMensagem("X primeiro");
        } else {
            sinal = false;
            enviarMensagem("true" + criptografia);
            textArea.append("O primeiro\n");
            ScrollToBottom();
            enviarMensagem("O primeiro");
        }

        buttonDefault();
        estadoButton(true);
        newGame.setEnabled(false);
    }                                       

    private void joinActionPerformed(java.awt.event.ActionEvent evt) {                                     
        try {
            if (nick.getText().equals("") || nick.getText().equals(" ")) {
                try {
                    JOptionPane.showMessageDialog(null, "Você precisa definir um apelido antes de começar");
                } catch (ExceptionInInitializerError exc) {
                }
                return;
            }

            //cria sockets
            sockets = new Socket(ip.getText(), Integer.parseInt(port.getText()));

            saida = new ObjectOutputStream(sockets.getOutputStream());
            saida.flush();
            entrada = new ObjectInputStream(sockets.getInputStream());

            msg = (String) entrada.readObject();
            textArea.append(msg + "\n");
            ScrollToBottom();

            xo = "O";
            sinal = false;

            apelido2 = nick.getText();

            //captura o apelido
            msg = (String) entrada.readObject();
            apelido1 = "" + msg;

            enviarMensagem(apelido2);

            estadoButton(true);
            message.setEditable(true);

            ip.setEnabled(false);
            port.setEnabled(false);
            nick.setEnabled(false);

            textArea.append("X primeiro!\n");
            ScrollToBottom();

            join.setEnabled(false);
            create.setEnabled(false);
            ip.setEnabled(false);
            port.setEnabled(false);
            nick.setEnabled(false);

            //thread que recebe dados do servidor
            new ControlaJogo.recebeMensagem("Recebe");
        } catch (Exception e) {
            encerrarTudo();
            executarTudo();
            try {
                JOptionPane.showMessageDialog(null, "Erro - servidor nao esta online: " + e);
            } catch (ExceptionInInitializerError exc) {
            }
        }
    }                                    

    private void createActionPerformed(java.awt.event.ActionEvent evt) {                                       
        if (nick.getText().equals("") || nick.getText().equals(" ")) {
            try {
                JOptionPane.showMessageDialog(null, "Você precisa definir um apelido antes de começar");
            } catch (ExceptionInInitializerError exc) {
            }
            return;
        }

        //cria a thread que fica esperando a resposta do servidor
        new ControlaJogo.criarThread("CreateButton");
    }                                      

    private void messageKeyPressed(java.awt.event.KeyEvent evt) {                                   
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            textArea.append(nick.getText() + ":" + message.getText() + "\n");
            ScrollToBottom();
            enviarMensagem(message.getText());
            message.setText(" ");
        }
    }                                  

    private void messageActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    //funções
    public void inicia() {
        botao1.setFont(fontButtons);
        botao1.setText("[ 1 ]");
        botao2.setFont(fontButtons);
        botao2.setText("[ 2 ]");
        botao3.setFont(fontButtons);
        botao3.setText("[ 3 ]");
        botao4.setFont(fontButtons);
        botao4.setText("[ 4 ]");
        botao5.setFont(fontButtons);
        botao5.setText("[ 5 ]");
        botao6.setFont(fontButtons);
        botao6.setText("[ 6 ]");
        botao7.setFont(fontButtons);
        botao7.setText("[ 7 ]");
        botao8.setFont(fontButtons);
        botao8.setText("[ 8 ]");
        botao9.setFont(fontButtons);
        botao9.setText("[ 9 ]");
        port.setText("5000");
        nick.setText("");
        textArea.setEditable(false);
        estadoButton(false);
    }

    //cria thread do jogo
    private class criarThread implements Runnable {

        public criarThread(String name) {
            new Thread(this, name).start();
        }

        public void run() {
            try {
                join.setEnabled(false);
                create.setEnabled(false);
                port.setEnabled(false);
                nick.setEnabled(false);

                //cria socket do servidor
                serverSocket = new ServerSocket(Integer.parseInt(port.getText()));

                textArea.append("Esperando cliente conectar......\n");
                ScrollToBottom();
                sockets = serverSocket.accept();

                //informa resultado da conexao
                saida = new ObjectOutputStream(sockets.getOutputStream());
                saida.flush();
                entrada = new ObjectInputStream(sockets.getInputStream());
                enviarMensagem(nick.getText() + ": conectado com sucesso!");
                textArea.append("Cliente conectado com sucesso!\n");
                ScrollToBottom();

                xo = "X";
                sinal = true;
                apelido1 = nick.getText();
                enviarMensagem(apelido1);

                msg = (String) entrada.readObject(); // captura o apelido do servidor
                apelido2 = "" + msg;

                estadoButton(true);
                message.setEditable(true);
                ip.setEnabled(false);

                textArea.append("X primeiro\n");
                ScrollToBottom();
                new recebeMensagem("recebeData");
            } catch (Exception e) {
                encerrarTudo();
                executarTudo();
                try {
                    JOptionPane.showMessageDialog(null, "Erro ao criar o jogo:\n" + e);
                } catch (ExceptionInInitializerError exc) {
                }
            }
        }
    }

    //configura os botoes com X
    private void checaJogo() {
                //vertical
        if ((jogo[0].equals("X") && jogo[1].equals("X") && jogo[2].equals("X"))
                || (jogo[3].equals("X") && jogo[4].equals("X") && jogo[5].equals("X"))
                || (jogo[6].equals("X") && jogo[7].equals("X") && jogo[8].equals("X"))
                //horizontal
                || (jogo[0].equals("X") && jogo[3].equals("X") && jogo[6].equals("X"))
                || (jogo[1].equals("X") && jogo[4].equals("X") && jogo[7].equals("X"))
                || (jogo[2].equals("X") && jogo[5].equals("X") && jogo[8].equals("X"))
                //diagonal
                || (jogo[0].equals("X") && jogo[4].equals("X") && jogo[8].equals("X"))
                || (jogo[2].equals("X") && jogo[4].equals("X") && jogo[6].equals("X"))) {

            numJogadas = 0;
            estadoButton(false);
            JOptionPane.showMessageDialog(null, apelido1 + " ganhou!");
            if (xo.equals("X")) {
                newGame.setEnabled(true);
            }
                
                //horizontal
        } else if (
                (jogo[0].equals("O") && jogo[1].equals("O") && jogo[2].equals("O"))
                || (jogo[3].equals("O") && jogo[4].equals("O") && jogo[5].equals("O"))
                || (jogo[6].equals("O") && jogo[7].equals("O") && jogo[8].equals("O"))
                //vertical
                ||(jogo[0].equals("O") && jogo[3].equals("O") && jogo[6].equals("O"))
                || (jogo[1].equals("O") && jogo[4].equals("O") && jogo[7].equals("O"))
                || (jogo[2].equals("O") && jogo[5].equals("O") && jogo[8].equals("O"))
                //diagonal
                ||(jogo[0].equals("O") && jogo[4].equals("O") && jogo[8].equals("O"))
                || (jogo[2].equals("O") && jogo[4].equals("O") && jogo[6].equals("O"))) {
            
            numJogadas = 0;
            estadoButton(false);
            JOptionPane.showMessageDialog(null, apelido2 + " ganhou!");
            if (xo.equals("X")) {
                newGame.setEnabled(true);
            }
        } else {
            if (numJogadas >= 9) {
                numJogadas = 0;
                enviarMensagem("desenha!" + criptografia);
                JOptionPane.showMessageDialog(null, "DRAW!");
                if (xo.equals("X")) {
                    newGame.setEnabled(true);
                }
            }
        }
    }

    //habilita e desabilita os botoes
    private void estadoButton(boolean b) {
        botao1.setEnabled(b);
        botao2.setEnabled(b);
        botao3.setEnabled(b);
        botao4.setEnabled(b);
        botao5.setEnabled(b);
        botao6.setEnabled(b);
        botao7.setEnabled(b);
        botao8.setEnabled(b);
        botao9.setEnabled(b);
    }

    //volta os botoes pro padrão
    private void buttonDefault() {
        botao1.setText("[ 1 ]");
        botao2.setText("[ 2 ]");
        botao3.setText("[ 3 ]");
        botao4.setText("[ 4 ]");
        botao5.setText("[ 5 ]");
        botao6.setText("[ 6 ]");
        botao7.setText("[ 7 ]");
        botao8.setText("[ 8 ]");
        botao9.setText("[ 9 ]");
    }

    //envia mensagem no bate-papo
    private void enviarMensagem(String p) {
        try {
            if (pararSinal) {
                saida.writeObject(p);
                saida.flush();
            }
        } catch (SocketException e) {
            if (pararSinal) {
                pararSinal = false;
                encerrarTudo();
                executarTudo();
            }
        } catch (Exception e) {
            if (pararSinal) {
                pararSinal = false;
                encerrarTudo();
                executarTudo();
                try {
                    JOptionPane.showMessageDialog(null, "Fluxo de dados desconectado:\n" + e);
                } catch (ExceptionInInitializerError exc) {
                }
            }
        }
    }

    //recebe messages com thread
    private class recebeMensagem implements Runnable {

        private boolean auxsinal;
        private String rmsg;

        public recebeMensagem(String i) {
            auxsinal = true;
            rmsg = i;
            new Thread(this, rmsg).start();
        }

        public void run() {
            while (auxsinal) {
                try {
                    // recebe mensagens
                    msg = "";
                    msg = (String) entrada.readObject(); 

                    if (rmsg.equals("Recebe")) // client recebe dados do host/server
                    {
                        if (msg.equalsIgnoreCase("true" + criptografia)) {
                            sinal = true;
                        } else if (msg.equalsIgnoreCase("false" + criptografia)) {
                            sinal = false;
                        } else if (msg.equalsIgnoreCase("desenha!" + criptografia)) {
                            JOptionPane.showMessageDialog(null, "DRAW!");
                        } else if (msg.equalsIgnoreCase("novojogo!" + criptografia)) {
                            for (int i = 0; i < jogo.length; i++) {
                                jogo[i] = "";
                            }
                            sinal = true;
                            buttonDefault();
                            estadoButton(true);
                        } else if (msg.equalsIgnoreCase("X1" + criptografia)) {
                            botao1.setText("X");
                            jogo[0] = "X";
                            botao1.setEnabled(false);
                            checaJogo();
                        } else if (msg.equalsIgnoreCase("X2" + criptografia)) {
                            botao2.setText("X");
                            jogo[1] = "X";
                            botao2.setEnabled(false);
                            checaJogo();
                        } else if (msg.equalsIgnoreCase("X3" + criptografia)) {
                            botao3.setText("X");
                            jogo[2] = "X";
                            botao3.setEnabled(false);
                            checaJogo();
                        } else if (msg.equalsIgnoreCase("X4" + criptografia)) {
                            botao4.setText("X");
                            jogo[3] = "X";
                            botao4.setEnabled(false);
                            checaJogo();
                        } else if (msg.equalsIgnoreCase("X5" + criptografia)) {
                            botao5.setText("X");
                            jogo[4] = "X";
                            botao5.setEnabled(false);
                            checaJogo();
                        } else if (msg.equalsIgnoreCase("X6" + criptografia)) {
                            botao6.setText("X");
                            jogo[5] = "X";
                            botao6.setEnabled(false);
                            checaJogo();
                        } else if (msg.equalsIgnoreCase("X7" + criptografia)) {
                            botao7.setText("X");
                            jogo[6] = "X";
                            botao7.setEnabled(false);
                            checaJogo();
                        } else if (msg.equalsIgnoreCase("X8" + criptografia)) {
                            botao8.setText("X");
                            jogo[7] = "X";
                            botao8.setEnabled(false);
                            checaJogo();
                        } else if (msg.equalsIgnoreCase("X9" + criptografia)) {
                            botao9.setText("X");
                            jogo[8] = "X";
                            botao9.setEnabled(false);
                            checaJogo();
                        } else {
                            if (msg.endsWith(criptografia)) {
                                msg = msg.substring(0, msg.length() - criptografia.length());
                            }
                            textArea.append(apelido1 + ":" + msg + "\n");
                            ScrollToBottom();
                        }
                    } else if (rmsg.equals("recebeData")) // host/server recebe dados do client
                    {
                        if (msg.equalsIgnoreCase("true" + criptografia)) {
                            sinal = true;
                        } else if (msg.equalsIgnoreCase("O1" + criptografia)) {
                            ++numJogadas;
                            botao1.setText("O");
                            jogo[0] = "O";
                            botao1.setEnabled(false);
                            checaJogo();
                        } else if (msg.equalsIgnoreCase("O2" + criptografia)) {
                            ++numJogadas;
                            botao2.setText("O");
                            jogo[1] = "O";
                            botao2.setEnabled(false);
                            checaJogo();
                        } else if (msg.equalsIgnoreCase("O3" + criptografia)) {
                            ++numJogadas;
                            botao3.setText("O");
                            jogo[2] = "O";
                            botao3.setEnabled(false);
                            checaJogo();
                        } else if (msg.equalsIgnoreCase("O4" + criptografia)) {
                            ++numJogadas;
                            botao4.setText("O");
                            jogo[3] = "O";
                            botao4.setEnabled(false);
                            checaJogo();
                        } else if (msg.equalsIgnoreCase("O5" + criptografia)) {
                            ++numJogadas;
                            botao5.setText("O");
                            jogo[4] = "O";
                            botao5.setEnabled(false);
                            checaJogo();
                        } else if (msg.equalsIgnoreCase("O6" + criptografia)) {
                            ++numJogadas;
                            botao6.setText("O");
                            jogo[5] = "O";
                            botao6.setEnabled(false);
                            checaJogo();
                        } else if (msg.equalsIgnoreCase("O7" + criptografia)) {
                            ++numJogadas;
                            botao7.setText("O");
                            jogo[6] = "O";
                            botao7.setEnabled(false);
                            checaJogo();
                        } else if (msg.equalsIgnoreCase("O8" + criptografia)) {
                            ++numJogadas;
                            botao8.setText("O");
                            jogo[7] = "O";
                            botao8.setEnabled(false);
                            checaJogo();
                        } else if (msg.equalsIgnoreCase("O9" + criptografia)) {
                            ++numJogadas;
                            botao9.setText("O");
                            jogo[8] = "O";
                            botao9.setEnabled(false);
                            checaJogo();
                        } else {
                            if (msg.endsWith(criptografia)) {
                                msg = msg.substring(0, msg.length() - criptografia.length());
                            }
                            textArea.append(apelido2 + ":" + msg + "\n");
                            ScrollToBottom();
                        }
                    }
                } catch (Exception e) {
                    auxsinal = false;
                    encerrarTudo();
                    executarTudo();
                    try {
                        JOptionPane.showMessageDialog(null, "O outro jogador desconectou!");
                    } catch (ExceptionInInitializerError exc) {
                    }
                }
            }
        }
    }

    //volta para configurações iniciais
    private void executarTudo() {
        buttonDefault();
        estadoButton(false);

        msg = "";
        xo = "";
        pararSinal = true;
        numJogadas = 0;
        numPartidas = 0;

        for (int i = 0; i < jogo.length; i++) {
            jogo[i] = "";
        }

        ip.setEnabled(true);
        port.setEnabled(true);
        nick.setEnabled(true);
        create.setEnabled(true);
        join.setEnabled(true);

        newGame.setEnabled(false);
        message.setEditable(false);
    }

    //encerra o fluxo de dados
    private void encerrarTudo() {
        try {
            saida.flush();
        } catch (Exception e) {
        }
        try {
            saida.close();
        } catch (Exception e) {
        }
        try {
            entrada.close();
        } catch (Exception e) {
        }
        try {
            serverSocket.close();
        } catch (Exception e) {
        }
        try {
            sockets.close();
        } catch (Exception e) {
        }
    }

    //acompanha o chat
    public void ScrollToBottom() {
        textArea.setCaretPosition(textArea.getText().length());
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton botao1;
    private javax.swing.JButton botao2;
    private javax.swing.JButton botao3;
    private javax.swing.JButton botao4;
    private javax.swing.JButton botao5;
    private javax.swing.JButton botao6;
    private javax.swing.JButton botao7;
    private javax.swing.JButton botao8;
    private javax.swing.JButton botao9;
    private javax.swing.JButton create;
    private javax.swing.JTextField ip;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JButton join;
    private javax.swing.JTextField message;
    private javax.swing.JButton newGame;
    private javax.swing.JTextField nick;
    private javax.swing.JTextField port;
    private javax.swing.JScrollPane sp;
    private javax.swing.JTextArea textArea;
    // End of variables declaration                   
}
